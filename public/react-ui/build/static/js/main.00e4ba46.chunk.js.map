{"version":3,"sources":["BlockInfo.js","BlocksTable.js","App.js","serviceWorker.js","index.js"],"names":["BlockInfo","props","title","visible","onCancel","handleOk","footer","key","onClick","spinning","size","blockIndex","previousHash","columns","dataIndex","BlocksTable","state","tableLoading","tableData","blockDetailsVisible","blockDetails","blockDetailsLoading","hanleRowClick","hash","setState","fetch","method","then","response","json","blocks","this","block_index","previous_hash","onRow","record","rowIndex","event","loading","dataSource","React","Component","Header","Footer","Content","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2XA0BeA,EAnBG,SAACC,GAEjB,OACE,uBACEC,MAAM,UACNC,QAAWF,EAAME,QACjBC,SAAYH,EAAMI,SAClBC,OAAU,CACR,uBAAQC,IAAI,KAAKC,QAASP,EAAMI,UAAhC,UAGF,uBAAMI,SAAUR,EAAMQ,WACtB,2BAAG,oCAAH,IAAgB,6BAAMR,EAAMS,MAC5B,2BAAG,2CAAH,IAAuB,6BAAMT,EAAMU,YACnC,2BAAG,6CAAH,IAAyB,6BAAMV,EAAMW,gBCZrCC,EAAU,CACd,CACEX,MAAO,aACPY,UAAW,OACXP,IAAK,QAEP,CACEL,MAAO,aACPY,UAAW,OACXP,IAAK,QAEP,CACEL,MAAO,cACPY,UAAW,SACXP,IAAK,WAsFMQ,E,2MAhFbC,MAAQ,CACNC,cAAc,EACdC,UAAW,GACXC,qBAAqB,EACrBC,aAAc,GACdC,qBAAqB,G,EAkBvBC,cAAgB,SAACC,GACf,EAAKC,SAAS,CACZL,qBAAqB,EACrBE,qBAAqB,IAGvBI,MAAM,iBAAiBF,EAAK,CAACG,OAAQ,QACpCC,MAAK,SAAAC,GACJ,OAAOA,EAASC,UAEjBF,MAAK,SAAAE,GACJ,EAAKL,SAAS,CACZL,qBAAqB,EACrBC,aAAcS,EACdR,qBAAqB,Q,EAM3BhB,SAAW,WACT,EAAKmB,SAAS,CACZL,qBAAqB,EACrBC,aAAc,M,oFArCG,IAAD,OAClBK,MAAM,UAAU,CAACC,OAAQ,QACxBC,MAAK,SAAAC,GACJ,OAAOA,EAASC,UAEjBF,MAAK,SAAAE,GACJ,EAAKL,SAAS,CACZN,UAAWW,EAAKC,OAChBb,cAAc,S,+BAiCX,IAAD,OACN,OACE,6BAEA,kBAAC,EAAD,CACER,SAAUsB,KAAKf,MAAMK,oBACrBlB,QAAS4B,KAAKf,MAAMG,oBACpBT,KAAMqB,KAAKf,MAAMI,aAAaV,KAC9BC,WAAYoB,KAAKf,MAAMI,aAAaY,YACpCpB,aAAcmB,KAAKf,MAAMI,aAAaa,cACtC5B,SAAU0B,KAAK1B,WAGjB,uBACE6B,MAAS,SAACC,EAAQC,GAChB,MAAO,CACL5B,QAAS,SAAA6B,GACP,EAAKf,cAAca,EAAOZ,SAIhCe,QAAWP,KAAKf,MAAMC,aACtBsB,WAAYR,KAAKf,MAAME,UAAWL,QAASA,S,GA1EzB2B,IAAMC,WCdxBC,E,IAAAA,OAAQC,E,IAAAA,OAAQC,E,IAAAA,QAoBTC,E,iLAdX,OACE,yBAAKC,UAAU,OACf,2BACE,kBAACJ,EAAD,CAAQI,UAAU,UAAlB,qBACA,kBAACF,EAAD,KACE,kBAAC,EAAD,OAEF,kBAACD,EAAD,CAAQG,UAAU,UAAlB,2B,GATUL,aCLEM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/B,MAAK,SAAAgC,GACjCA,EAAaC,kB","file":"static/js/main.00e4ba46.chunk.js","sourcesContent":["import React from 'react';\n\n// Import antd components\nimport { Modal, Button, Spin } from 'antd';\n\n// stateless component\n// Uses a Modal objet to display the information of a single block\nconst BlockInfo = (props) => {\n\n  return(\n    <Modal\n      title=\"Details\"\n      visible = {props.visible}\n      onCancel = {props.handleOk}\n      footer = {[\n        <Button key=\"ok\" onClick={props.handleOk}> ok </Button>,\n      ]}\n    >\n      <Spin spinning={props.spinning}></Spin>\n      <p><b>size:</b> <br/>{props.size}</p>\n      <p><b>Block Index:</b> <br/>{props.blockIndex}</p>\n      <p><b>Previous Hash:</b> <br/>{props.previousHash}</p>\n    </Modal>\n  )\n}\n\nexport default BlockInfo;\n","import React from 'react';\n\n// Import antd components\nimport { Table } from 'antd';\n\n// Import other components\nimport BlockInfo from './BlockInfo';\n\n// Table Data\nconst columns = [\n  {\n    title: 'Block Hash',\n    dataIndex: 'hash',\n    key: 'hash',\n  },\n  {\n    title: 'Block Time',\n    dataIndex: 'time',\n    key: 'time',\n  },\n  {\n    title: 'Bock Height',\n    dataIndex: 'height',\n    key: 'height',\n  },\n];\n\nclass BlocksTable extends React.Component {\n\n  state = {\n    tableLoading: true,\n    tableData: [],\n    blockDetailsVisible: false,\n    blockDetails: {},\n    blockDetailsLoading: false,\n  }\n\n  // Request data from the API and populate the table\n  componentWillMount(){\n    fetch('/blocks',{method: 'get',})\n    .then(response => {\n      return response.json()\n    })\n    .then(json => {\n      this.setState({\n        tableData: json.blocks,\n        tableLoading: false,\n      });\n    })\n  }\n\n  // Request data of a specific block and populates props for BlockInfo component\n  hanleRowClick = (hash) => {\n    this.setState({\n      blockDetailsVisible: true,\n      blockDetailsLoading: true,\n    });\n\n    fetch('/blockDetails/'+hash,{method: 'get',})\n    .then(response => {\n      return response.json()\n    })\n    .then(json => {\n      this.setState({\n        blockDetailsVisible: true,\n        blockDetails: json,\n        blockDetailsLoading: false\n      });\n    })\n  }\n\n  // Hide the modal and clean the data of an specific block\n  handleOk = () => {\n    this.setState({\n      blockDetailsVisible: false,\n      blockDetails: {},\n    })\n  }\n\n  render(){\n    return(\n      <div>\n\n      <BlockInfo\n        spinning={this.state.blockDetailsLoading}\n        visible={this.state.blockDetailsVisible}\n        size={this.state.blockDetails.size}\n        blockIndex={this.state.blockDetails.block_index}\n        previousHash={this.state.blockDetails.previous_hash}\n        handleOk={this.handleOk}\n      />\n\n      <Table\n        onRow = {(record, rowIndex) => {\n          return {\n            onClick: event => {\n              this.hanleRowClick(record.hash)\n            }\n          }\n        }}\n        loading = {this.state.tableLoading}\n        dataSource={this.state.tableData} columns={columns}\n      />\n\n      </div>\n    )\n  }\n}\n\nexport default BlocksTable;\n","import React, { Component } from 'react';\n\n// Import antd components\nimport { Layout } from 'antd';\n\n// Import styles\nimport './App.css';\n\n// Import other components\nimport BlocksTable from './BlocksTable';\n\n\n// Layout constants\nconst { Header, Footer, Content } = Layout;\n\n\n// Main component\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n      <Layout>\n        <Header className=\"Header\">Bitwala Challenge</Header>\n        <Content>\n          <BlocksTable />\n        </Content>\n        <Footer className=\"Footer\">Camilo Daza. 2019</Footer>\n      </Layout>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}